# ROMHack Races BaseROM Studio Manager

> Install and manage ROMHack Races BaseROM Studio instances

1. Download and cache Tools in `./Downloads`
1. Install RHRBRS instances
1. Backup RHRBRS instances
1. (opt) Specify `TARGET` to install/manage multiple instances


```bash
âœ” 23:11 meLon@Windows ~/Projects/baserom $ ./rhrbrsm.py -h
usage: rhrbrsm.py [-h] [-v] [-t TARGET] [--install-path [INSTALL_PATH]]
    [--retroarch-path [RETROARCH_PATH]] [--cleanrom-path [CLEANROM_PATH]]
    {install,backup,buildbaserom} ...

ROMHack Races Base ROM Studio (RHRBRS) Manager

positional arguments:
  {install,backup,buildbaserom}
    install             Install RHRBRS Instance
    backup              Create Backup of RHRBRS Instance
    buildbaserom        Build ROMHack Races BaseROM

options:
  -h, --help            Show this help message and exit.
  -v, --version         Show additional version details.
  -t TARGET, --target TARGET
                        Name of installation target.
                        (default: 0.1)
  --install-path [INSTALL_PATH]
                        Path for RHRBRS Installations.
                        (default: C:\Users\meLon\Projects\baserom\Installs)
  --retroarch-path [RETROARCH_PATH]
                        Path to existing RetroArch emulator binary.
                        (default: C:\Users\meLon\AppData)
  --cleanrom-file [CLEANROM_FILE]
                        Path to Super Mario World headerless .smc ROM (ie: (U) [!]).
                        A copy is created in the installation directory.
                        (default: C:\Users\meLon\Projects\baserom\clean.smc)

version: 0.1
```

## Install RHRBRSM

```bash
sudo apt install python3 python3-pip python3-venv
python3 -m venv .env
source .env/bin/activate
pip install -r requirements.txt
```

### Installing Python in WSL

WSL ships an outdated version of Python.

```bash
#!/bin/bash
# build-python3-wsl.sh

sudo apt install build-essential checkinstall pkg-config zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libsqlite3-dev libreadline-dev libffi-dev libbz2-dev libc6-dev tk-dev liblzma-dev uuid-dev curl wget

FILE="/etc/ld.conf.so"
LINE="/usr/local/lib"
grep -qF -- "$LINE" "$FILE" || echo "$LINE" | sudo tee -a "$FILE"

mkdir -p ~/src

cd ~/src
git clone https://github.com/openssl/openssl.git; cd openssl
git fetch -a
LATEST_TAG=$(git tag -l --format="%(creatordate:raw) %(refname)" | grep "OpenSSL_1"| sort -r | head -n1 | cut -d' ' -f3)
git checkout "$LATEST_TAG"
./config shared --prefix=/usr/local/
make -j $(expr $(nproc --all) - 2)
sudo ldconfig

cd ~/src
git clone https://github.com/python/cpython; cd cpython
git fetch -a
LATEST_TAG=$(git tag -l --format="%(creatordate:raw) %(refname)" | grep -v "rc" | grep 'v3.' | grep -E '.*\.[0-9]+$'| sort -r | head -n1 | cut -d' ' -f3)
git checkout "$LATEST_TAG"
LDFLAGS="$(pkg-config --libs openssl)" ./configure --enable-optimizations --with-lto --enable-shared
make -j $(expr $(nproc --all) - 2)
sudo make install
sudo ldconfig

sudo update-alternatives --install /usr/bin/python3 python /usr/local/bin/pyth
on3.10 10
sudo update-alternatives --install /usr/bin/python python3 /usr/local/bin/pyth
on3.10 10
```

## Usage Examples

### Install RHRBRS instance

> Create RHRBRS installation

```bash
# Install default instance
./rhrbrsm.py install --force-install-configs
# Install named instance
./rhrbrsm.py -t banana install --force-install-configs
# Install instance on another disk
./rhrbrsm.py install --force-install-configs --install-path='D:\RHRBRS_Installs'
```

### Backup

> Backup RHRBRS installation

* Backups are found in the `./Installs/_Backups/` directory.
* Backups are created with current year and julian date (ie: `2021-001` - `2021-365`)
* Backups of the same instance on the same day prevent collision (ie: `2021-001-165769413303`)

```bash
# Backup default instance
./rhrbrsm.py backup
# Backup named instance
./rhrbrsm.py -t banana backup
./rhrbrsm.py backup --install-path='D:\RHRBRS_Installs'
```
